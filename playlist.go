package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strings"
)

func createPlaylist(jwtToken string, playlistName string) (string, error) {
    // API URL 설정
    url := "https://api.music.apple.com/v1/me/library/playlists"
    
    // 요청 본문 설정
    requestBody := fmt.Sprintf(`{
        "attributes": {
            "name": "%s",
            "description": "Generated by MusicKit API"
        }
    }`, playlistName)
    
    // 요청 생성
    req, err := http.NewRequest("POST", url, strings.NewReader(requestBody))
    if err != nil {
        return "", err
    }
    
    // 헤더 설정
    userToken := os.Getenv("USER_TOKEN")
    req.Header.Set("Content-Type", "application/json")

    req.Header.Set("Authorization", "Bearer "+jwtToken)
    req.Header.Set("Music-User-Token", userToken)
    
    // 클라이언트 생성 및 요청 전송
    client := &http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        return "", err
    }
    defer resp.Body.Close()
    
    // 응답 처리
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        return "", err
    }
    
    // 응답 디버그 출력
    // fmt.Println("Response Body:", string(body))
    
    var result map[string]interface{}
    if err := json.Unmarshal(body, &result); err != nil {
        return "", err
    }
    
    data, ok := result["data"]
    if !ok {
        return "", errors.New("response does not contain data field")
    }

    playlists, ok := data.([]interface{})
    if !ok {
        return "", fmt.Errorf("expected []interface{}, got %T", data)
    }

    if len(playlists) == 0 {
        return "", errors.New("no playlists created")
    }

    playlist, ok := playlists[0].(map[string]interface{})
    if !ok {
        return "", fmt.Errorf("expected map[string]interface{}, got %T", playlists[0])
    }

    playlistId, ok := playlist["id"].(string)
    if !ok {
        return "", errors.New("playlist does not contain id field")
    }
    
    return playlistId, nil
}

func listPlaylists(jwtToken string) ([]map[string]interface{}, error) {
    url := "https://api.music.apple.com/v1/me/library/playlists?limit=100"

    req, err := http.NewRequest("GET", url, nil)
    if err != nil {
        return nil, err
    }

    userToken := os.Getenv("USER_TOKEN")
    req.Header.Set("Authorization", "Bearer "+jwtToken)
    req.Header.Set("Music-User-Token", userToken)
    req.Header.Set("Content-Type", "application/json")

    client := &http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        return nil, err
    }
    defer resp.Body.Close()

    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        return nil, err
    }

    var result map[string]interface{}
    if err := json.Unmarshal(body, &result); err != nil {
        return nil, err
    }

    playlistsData, ok := result["data"].([]interface{})
    if !ok {
        return nil, fmt.Errorf("expected []interface{}, got %T", result["data"])
    }

    var playlists []map[string]interface{}
    for _, item := range playlistsData {
        playlist, ok := item.(map[string]interface{})
        if !ok {
            continue
        }
        playlists = append(playlists, playlist)
    }

    return playlists, nil
}